/** * Copyright (c) 2007 Moses Gunesch *  * Permission is hereby granted, free of charge, to any person obtaining a copy * of this software and associated documentation files (the "Software"), to deal * in the Software without restriction, including without limitation the rights * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell * copies of the Software, and to permit persons to whom the Software is * furnished to do so, subject to the following conditions: *  * The above copyright notice and this permission notice shall be included in * all copies or substantial portions of the Software. *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN * THE SOFTWARE. */package com.mosesSupposes.go.tutorials.blocktweenmg {	import org.goasap.utils.SequenceCA;	import org.goasap.utils.SequenceStepCA;	import org.goasap.utils.customadvance.OnPlayableComplete;	import org.goasap.utils.customadvance.SequenceAdvance;		/**	 * Read notes in BlockTweenMG first, this is a basic object-syntax parser.	 * 	 * <p>This parser supports simplified Fuse-style syntax, including support	 * for parallel-action arrays. Then, since Go's SequenceCA class provides	 * custom-advance functionality, I used that class and included a condition	 * for parsing an 'advance' property into the sequence step (SequenceStepCA).	 * This is really handy for making tweens overlap, for example by passing an	 * OnDurationComplete instance with a shorter duration than the tween.	 * If you want to advance after just one item in a parallel group completes,  	 * you can pass advance:new OnPlayableComplete() with no arguments to indicate 	 * "this action."</p>	 * 	 * <p>Examples:</p>	 * <pre>	 * // one-off tween (returns the BlockTweenMG instance generated)	 * BlockParserMG.go({ target:sprite1, x:10, rotation:90, useRelative:true, delay:.5, easing:Back.easeOut });	 * 	 * // sequence (returns the SequenceCA instance generated)	 * BlockParserMG.sequence({ target:sprite2, x:10, useRelative:true, duration:.5 },	 * 	 *                        // the next action has a custom advance that advances the sequence at 2 seconds.	 *                        { target:sprite2, y:100, useRelative:true, duration:3, advance:new OnDurationComplete(2) },	 * 	 *                        // the last action is parallel group in an array	 *                        [	 *                          { target:sprite2, rotation:180, alpha:0, ease:Quintic.easeIn, delay:.5 },	 *                          { target:sprite2, scaleX:4, scaleY:4, ease:Elastic.easeOut, duration:1.5 }	 *                        ]);	 * </pre>	 * 	 * @author Moses Gunesch	 * @version 1.1	 */	public class BlockParserMG {				/**		 * Generate and starts a single tween with any number of properties.		 * 		 * @param action	An instance of Object that enumerates tween settings & properties,		 * 					which may include any public property of BlockTweenMG such as duration.		 * @return	The BlockTweenMG instance generated.		 */		public static function go(action:Object): BlockTweenMG {			var tween:BlockTweenMG = parseAction(action);			tween.start();			return tween;		}				/**		 * Generates and starts a SequenceCA with any number of individual or parallel actions.		 * 		 * @param ...actions	Any number of instance of Object or Arrays containing objects that 		 * 						enumerate tween settings & properties. Action objects may include 		 * 						a special parameter 'advance' set to a SequenceAdvance instance. This		 * 						allows you to customize the criteria that determine when the sequence 		 * 						should advance to the next action, normally done when all tweens complete.		 * 								 * @return	The SequenceCA instance generated.		 */		public static function sequence(...actions): SequenceCA {			var seq:SequenceCA = new SequenceCA();			for (var i:Number=0; i<actions.length; i++) {								// create a new step for the sequence...				var step:SequenceStepCA = new SequenceStepCA();								// support parallel action Arrays... normalize so we can do one loop.				var group:Array = (actions[i] is Array ? actions[i] : [ actions[i] ]);								for each (var action:Object in group) {					// add each action to the sequence step.					var tween: BlockTweenMG = parseAction(action);					step.addChild(tween);										// -== Special feature: custom-advance. ==-					if (action.hasOwnProperty("advance")) {						var advance: SequenceAdvance = (action["advance"] as SequenceAdvance);						if (advance) {							// Set a missing IPlayable item reference to the tween being built.							if (advance is OnPlayableComplete) {								if ((advance as OnPlayableComplete).item==null)									(advance as OnPlayableComplete).item = tween;							}							// Set the step's advance property.							step.advance = advance;						}					}					// --------------------------------------- 				}				// add the step to the sequence.				seq.addStep(step);			}			seq.start();			return seq;		}				/**		 * Internal method for parsing an enumerated object into a tween instance.		 * @param action	An instance of Object that enumerates tween settings & properties.		 * @param step		Passed by sequence only so a custom advance can be set on the current step.		 */		private static function parseAction(action : Object) : BlockTweenMG {			var tween: BlockTweenMG = new BlockTweenMG();			for (var prop:String in action) {				var value : * = action [ prop ];								// Tween instance property like delay, useRelative, pulseInterval, etc.				if (tween.hasOwnProperty(prop)) {					tween[prop] = value;					continue;				}								// Treat all others as animation properties				// except special advance property which is handled in sequence().				if (prop!="advance") {					tween.addProperty(prop, value);				}			}			return tween;		}	}}