/** * Copyright (c) 2007 Moses Gunesch *  * Permission is hereby granted, free of charge, to any person obtaining a copy * of this software and associated documentation files (the "Software"), to deal * in the Software without restriction, including without limitation the rights * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell * copies of the Software, and to permit persons to whom the Software is * furnished to do so, subject to the following conditions: *  * The above copyright notice and this permission notice shall be included in * all copies or substantial portions of the Software. *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN * THE SOFTWARE. */package com.mosesSupposes.go.tutorials.blocktweenmg {	import flash.display.DisplayObject;		import org.goasap.items.LinearGo;	import org.goasap.managers.LinearGoRepeater;		/**	 * This example shows how you can create a Fuse-style tween and sequencing	 * parser in just a few minutes!	 * 	 * <p>BlockTweenMG is a basic multiple-property tween class. If you've never	 * built a tween class over Go, please watch the Go Video Tutorial #1 available	 * at <a href="http://go.mosessupposes.com/">the official Go Blog</a>.</p>	 * 	 * <p>A common strategy (not required of course) is to keep the LinearGo tweening	 * layer completely OO in nature. That is, populate it with standard methods and	 * properties, but save any special syntaxes for a separate parsing layer such as	 * BlockParserMG.</p>	 * 	 * @author Moses Gunesch	 * @version 1.1	 */	public class BlockTweenMG extends LinearGo {				// -== Public Properties ==-				/**		 * Sets the tween target.		 */		public function get target(): DisplayObject {			return _target;		}		public function set target(target: DisplayObject): void {			if (super._state==STOPPED) {				_target = target;			}		}				/**		 * Adds another property to the tween.		 */		public function addProperty(name:String, value:Number): void {			if (super._state==STOPPED) {				_props.push(name);				_endVals.push(value);			}		}				// -== Protected Properties ==-				protected var _target: DisplayObject;		protected var _props: Array = new Array();		protected var _endVals: Array = new Array();		protected var _startVals: Array = new Array();		protected var _changeVals: Array = new Array();				// -== Public Methods ==-				public function BlockTweenMG(target: DisplayObject=null, 									 props: Array=null, // must correspond to each element of endVals if defined.									 endVals:Array=null, // must correspond to each element of props if defined.									 delay	 			: Number=NaN,									 duration 			: Number=NaN,									 easing 			: Function=null,									 extraEasingParams	: Array=null,									 repeater		: LinearGoRepeater=null,									 useRelative		: Boolean=false,									 useRounding		: Boolean=false,									 useFrames			: Boolean=false,									 pulseInterval		: Number=NaN) {			super(delay, duration, easing, extraEasingParams, repeater, useRelative, useRounding, useFrames, pulseInterval);			if (target!=null) {				_target = target;			}			if (props!=null && endVals!=null) {				for (var i:String in props)					addProperty(props[i], endVals[i]);			}		}				override public function start():Boolean {						if (target==null || _props.length==0) {				return false;			}			for (var i:String in _props) {				var start:Number = _startVals[i] = _target[_props[i]];				if (super.useRelative) {					_changeVals[i] = _endVals[i];				}				else {					_changeVals[i] = _endVals[i] - start;				}			}			return super.start();		}				// -== Protected Methods ==-				override protected function onUpdate(type: String): void {			for (var i:String in _props) {				_target[_props[i]] = super.correctValue( _startVals[i] + (_changeVals[i] * super._position) );			}		}	}}